# ========================================
# RECIPICK PROJECT - Application Configuration
# ========================================
# === 기본 서버 설정 ===
# 서버 포트 (AWS 배포 시 8080 포트 사용)
server.port=8080
# 애플리케이션 이름 (모니터링 및 로그에서 식별용)
spring.application.name=RECIPICK-PROJECT
# === 로그 설정 ===
# 로그 레벨: ERROR > WARN > INFO > DEBUG > TRACE (높음 > 낮음)
# 우리 프로젝트 패키지의 모든 로그 출력 (개발용)
logging.level.SITE.RECIPICK=DEBUG
# Spring Web 프레임워크 로그는 INFO 레벨로 제한 (HTTP 요청/응답 정보만 표시, DEBUG 로그 숨김)
logging.level.org.springframework.web=INFO
# === 개발 편의 설정 ===
# 콘솔 출력에 컬러 적용 (에러는 빨강, 정보는 초록 등)
spring.output.ansi.enabled=always
# === 정적 리소스 최적화 ===
# CSS, JS, 이미지 파일을 1시간(3600초) 동안 브라우저에 캐시 (로딩 속도 향상)
#spring.web.resources.cache.cachecontrol.max-age=3600
# ========================================
# 향후 확장용 설정들 (현재는 주석 처리됨)
# ========================================
# === 데이터베이스 연결 설정 (나중에 사용) ===
# MySQL 데이터베이스 연결 정보
# MySQL 서버 연결 URL (서버주소:포트/데이터베이스명)
spring.datasource.url=${DB_URL}
# MySQL 접속 사용자명
spring.datasource.username=${DB_USERNAME}
# MySQL 접속 비밀번호
spring.datasource.password=${DB_PASSWORD}
# MySQL JDBC 드라이버 클래스
spring.datasource.driver-class-name=${DB_DRIVER}
# === JPA/Hibernate 설정 (나중에 사용) ===
# 데이터베이스 테이블 자동 관리 설정
# 엔티티 변경 시 테이블 자동 생성/수정 (create/update/validate/none)
spring.jpa.hibernate.ddl-auto=${JPA_HIBERNATE_DDL}
# 실행되는 SQL 쿼리를 콘솔에 출력 (개발 시 디버깅용)
spring.jpa.show-sql=${JPA_SHOW_SQL}
# SQL 쿼리를 들여쓰기해서 보기 좋게 포맷팅
spring.jpa.properties.hibernate.format_sql=true
# === AWS RDS 연결 설정 (배포 시 사용) ===
# 실제 배포 시 사용할 RDS MySQL 연결 정보
# spring.datasource.url=jdbc:mysql://your-rds-endpoint:3306/recipick      # AWS RDS MySQL 엔드포인트
# spring.datasource.username=${DB_USERNAME}                               # 환경변수로 사용자명 설정 (보안)
# spring.datasource.password=${DB_PASSWORD}                               # 환경변수로 비밀번호 설정 (보안)
# === 프로덕션 환경 설정 (실제 서비스 배포 시 사용) ===
# 운영 환경용 로그 레벨 (성능 최적화 및 보안을 위해 필요한 로그만 출력)
# logging.level.root=WARN                                                 # 전체 시스템 로그를 WARN 이상만 출력 (INFO, DEBUG 숨김)
# logging.level.SITE.RECIPICK=INFO                                        # 우리 프로젝트는 INFO 이상만 출력 (DEBUG 숨김)
# === 보안 설정 (나중에 사용) ===
# Spring Security 관련 설정
# spring.security.user.name=admin                                         # 기본 관리자 계정명
# spring.security.user.password=${ADMIN_PASSWORD}                         # 관리자 비밀번호 (환경변수 사용)
# === 파일 업로드 설정 (이미지 업로드 기능 시 사용) ===
# 파일 업로드 크기 제한
# spring.servlet.multipart.max-file-size=10MB                             # 개별 파일 최대 크기
# spring.servlet.multipart.max-request-size=50MB                          # 전체 요청 최대 크기
# ========================================
# 개발 가이드
# ========================================
# 1. 현재 활성화된 설정: 위쪽 주석 없는 6개 설정
# 2. 서버 실행: ./gradlew bootRun (프론트엔드 자동 복사 + 서버 시작)
# 3. 접속 테스트: http://localhost:8080
# 4. API 문서: http://localhost:8080/swagger-ui.html
# 5. 설정 변경 후: 서버 재시작 필요
